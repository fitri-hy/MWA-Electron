<!DOCTYPE html>
<html lang="en" class="<%= darkMode ? 'dark' : '' %>">
<head>
  <%- include('partials/head') %>
</head>
<body class="bg-gray-50 dark:bg-neutral-800 text-gray-700 dark:text-gray-200 text-sm">
	<main class="w-full flex flex-col">
		<div id="pos-nav" class="h-8 font-semibold px-2 w-full flex gap-2 items-center overflow-x-auto text-gray-600 dark:text-gray-300">
			<%- include('partials/pos-menu') %>
		</div>
		<div class="bg-white dark:bg-neutral-900 p-3 w-full h-[calc(100vh-32px)] overflow-auto">
			<div class="grid grid-cols-2 md:grid-cols-4 gap-6">
				<div class="p-4 rounded text-white bg-purple-500 dark:bg-purple-700 border border-gray-200 dark:border-neutral-700">
					<h2 class="font-semibold">
						Invoice
					</h2>
					<p class="text-center text-2xl font-bold mt-1">
						<%= totalInvoiceCount %>
					</p>
				</div>
				<div class="p-4 rounded text-white bg-blue-500 dark:bg-blue-700 border border-gray-200 dark:border-neutral-700">
					<h2 class="font-semibold">
						Vendor
					</h2>
					<p class="text-center text-2xl font-bold mt-1">
						<%= totalVendors %>
					</p>
				</div>
				<div class="p-4 rounded text-white bg-pink-500 dark:bg-pink-700 border border-gray-200 dark:border-neutral-700">
					<h2 class="font-semibold">
						Customer
					</h2>
					<p class="text-center text-2xl font-bold mt-1">
						<%= totalCustomers %>
					</p>
				</div>
				<div class="p-4 rounded text-white bg-amber-500 dark:bg-amber-700 border border-gray-200 dark:border-neutral-700">
					<h2 class="font-semibold">
						Income
					</h2>
					<p class="text-center text-2xl font-bold mt-1">
						<%= Number(totalInvoiceAmount).toLocaleString() %>
					</p>
				</div>
			</div>
				
			<div class="flex border-b border-gray-300 dark:border-neutral-700 mt-6">
				<button id="tab-invoice" class="py-2 px-4 text-green-600 dark:text-green-600 border-b-2 border-green-500 dark:border-green-700 font-semibold hover:text-green-500 dark:hover:text-green-600 focus:outline-none" onclick="showTab('invoice')">
				  Invoice
				</button>
				<button id="tab-stock" class="py-2 px-4 border-b-2 border-transparent hover:text-green-500 dark:hover:text-green-600 focus:outline-none" onclick="showTab('stock')">
					Stock In-Out
				</button>
				<button id="tab-vendor" class="py-2 px-4 border-b-2 border-transparent hover:text-green-500 dark:hover:text-green-600 focus:outline-none" onclick="showTab('vendor')">
					Sales by Vendor
				</button>
			</div>

			<div id="content-invoice">
				<div class="flex justify-between gap-4 mt-4">
					<div id="custom-select" class="relative w-full max-w-xs px-4 py-2 rounded bg-white dark:bg-neutral-900 border border-gray-200 dark:border-neutral-700 focus:outline-none focus:border-green-400 dark:focus:border-green-800 cursor-pointer">
						<div id="selected-value" class="">
							-- Select Invoice --
						</div>
						<div id="dropdown" class="absolute top-full left-0 right-0 bg-white dark:bg-neutral-900 border border-gray-300 dark:border-neutral-700 mt-1 rounded shadow max-h-64 overflow-auto hidden z-20">
							<input type="text" id="dropdown-search" placeholder="Search invoices..." class="w-full px-3 py-2 border-b border-gray-300 dark:border-neutral-700 focus:outline-none dark:bg-neutral-900"/>
							<ul id="options-list" class="max-h-48 overflow-auto"></ul>
						</div>
					</div>
				</div>
				<div class="overflow-x-auto mt-2">
					<table class="w-full max-w-full bg-white dark:bg-neutral-900 text-sm">
						<thead class="bg-green-500 dark:bg-green-700 text-white">
							<tr>
								<th class="text-left px-4 py-2 whitespace-nowrap">Invoice</th>
								<th class="text-left px-4 py-2 whitespace-nowrap">Date</th>
								<th class="text-center px-4 py-2 whitespace-nowrap">Item</th>
								<th class="text-center px-4 py-2 whitespace-nowrap">QTY</th>
								<th class="text-left px-4 py-2 whitespace-nowrap">COGS</th>
								<th class="text-left px-4 py-2 whitespace-nowrap">Price</th>
								<th class="text-left px-4 py-2 whitespace-nowrap">Profit</th>
								<th class="text-center px-4 py-2 whitespace-nowrap">Actions</th>
							</tr>
						</thead>
						<tbody>
							<tr class="font-semibold bg-gray-100 dark:bg-neutral-800">
								<td colspan="2" class="p-2 w-full">Total</td>
								<td class="p-2 text-center whitespace-nowrap"><%= totalItem %></td>
								<td class="p-2 text-center whitespace-nowrap"><%= totalQty %></td>
								<td class="p-2 whitespace-nowrap text-right"><%= Number(totalCOGS).toLocaleString() %></td>
								<td class="p-2 whitespace-nowrap text-right"><%= Number(totalPrice).toLocaleString() %></td>
								<td class="p-2 whitespace-nowrap text-right"><%= Number(totalProfit).toLocaleString() %></td>
								<td class="p-2 whitespace-nowrap">
								</td>
							</tr>
							<% invoices.forEach(inv => { %>
								<tr class="border-b border-gray-200 dark:border-neutral-700">
									<td class="text-left p-2 whitespace-nowrap"><%= inv.invoice %></td>
									<td class="p-2 text-left whitespace-nowrap"><%= inv.date %></td>
									<td class="p-2 text-center whitespace-nowrap"><%= inv.itemCount %></td>
									<td class="p-2 text-center whitespace-nowrap"><%= inv.totalQty %></td>
									<td class="p-2 whitespace-nowrap text-right"><%= Number(inv.totalCOGS).toLocaleString() %></td>
									<td class="p-2 whitespace-nowrap text-right"><%= Number(inv.totalPrice).toLocaleString() %></td>
									<td class="p-2 whitespace-nowrap text-right"><%= Number(inv.profit).toLocaleString() %></td>
									<td class="text-center px-4 py-2">
										<div class="flex items-center justify-center gap-1">
											<form action="/pos/report/delete-invoice" method="POST" onsubmit="return confirm('Are you sure you want to delete this data?');">
												<input type="hidden" name="id" value="<%= inv.id %>" />
												<button type="submit" class="text-rose-500 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700">
													<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path fill="currentColor" d="M2.75 6.167c0-.46.345-.834.771-.834h2.665c.529-.015.996-.378 1.176-.916l.03-.095l.115-.372c.07-.228.131-.427.217-.605c.338-.702.964-1.189 1.687-1.314c.184-.031.377-.031.6-.031h3.478c.223 0 .417 0 .6.031c.723.125 1.35.612 1.687 1.314c.086.178.147.377.217.605l.115.372l.03.095c.18.538.74.902 1.27.916h2.57c.427 0 .772.373.772.834S20.405 7 19.979 7H3.52c-.426 0-.771-.373-.771-.833"/><path fill="currentColor" d="M11.607 22h.787c2.707 0 4.06 0 4.941-.863c.88-.864.97-2.28 1.15-5.111l.26-4.081c.098-1.537.147-2.305-.295-2.792s-1.187-.487-2.679-.487H8.23c-1.491 0-2.237 0-2.679.487s-.392 1.255-.295 2.792l.26 4.08c.18 2.833.27 4.248 1.15 5.112S8.9 22 11.607 22" opacity="0.5"/></svg>
												</button>
											</form>
										</div>
									</td>
								</tr>
							<% }) %>
						</tbody>
					</table>
				</div>
			</div>
			<div id="content-stock" class="hidden mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
				<div class="w-full overflow-x-auto">
					<h3 class="font-semibold mb-2">Stock Add Records</h3>
					<table class="w-full text-sm bg-white dark:bg-neutral-900">
						<thead class="bg-green-500 dark:bg-green-700 text-white">
						  <tr>
							<th class="p-2 text-left">Item</th>
							<th class="p-2 text-center">Stock</th>
							<th class="p-2 text-left">Date</th>
							<th class="p-2 text-center">Action</th>
						  </tr>
						</thead>
						<tbody>
						  <% addStocks.forEach(stock => { 
							  const item = inventoryMap.get(stock.item_id);
						  %>
						  <tr class="border-b border-gray-200 dark:border-neutral-700">
							<td class="p-2 w-full whitespace-nowrap"><%= item ? item.item : 'Unknown' %></td>
							<td class="p-2 text-center text-green-500 whitespace-nowrap">+<%= stock.stock %></td>
							<td class="p-2 whitespace-nowrap"><%= stock.date %></td>
							<td class="p-2 text-center">
							  <button onclick="toggleRow('add-<%= stock.id %>')" class="text-blue-500 text-sm">
								<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m19 9l-7 6l-7-6"/></svg>
							  </button>
							</td>
						  </tr>
						  <tr id="desc-add-<%= stock.id %>" class="desc-row hidden">
							<td colspan="4" class="text-xs px-2 py-1 italic bg-gray-50 dark:bg-neutral-800">
							  <%= stock.desc || 'No description' %>
							</td>
						  </tr>
						  <% }) %>
						</tbody>
					</table>
				</div>

				<div class="w-full overflow-x-auto">
					<h3 class="font-semibold mb-2">Stock Write-Off Records</h3>
					<table class="w-full text-sm bg-white dark:bg-neutral-900">
						<thead class="bg-rose-500 dark:bg-rose-700 text-white">
						  <tr>
							<th class="p-2 text-left">Item</th>
							<th class="p-2 text-center">Stock</th>
							<th class="p-2 text-left">Date</th>
							<th class="p-2 text-center">Action</th>
						  </tr>
						</thead>
						<tbody>
						  <% writeOffStocks.forEach(stock => { 
							  const item = inventoryMap.get(stock.item_id);
						  %>
						  <tr class="border-b border-gray-200 dark:border-neutral-800">
							<td class="p-2 w-full whitespace-nowrap"><%= item ? item.item : 'Unknown' %></td>
							<td class="p-2 text-center text-rose-500 whitespace-nowrap">-<%= stock.stock %></td>
							<td class="p-2 whitespace-nowrap"><%= stock.date %></td>
							<td class="p-2 text-center">
							  <button onclick="toggleRow('writeoff-<%= stock.id %>')" class="text-blue-500 text-sm">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m19 9l-7 6l-7-6"/></svg>
							  </button>
							</td>
						  </tr>
						  <tr id="desc-writeoff-<%= stock.id %>" class="desc-row hidden">
							<td colspan="4" class="text-xs px-2 py-1 italic bg-gray-50 dark:bg-neutral-800">
							  <%= stock.desc || 'No description' %>
							</td>
						  </tr>
						  <% }) %>
						</tbody>
					</table>
				</div>
			</div>
			
			<div id="content-vendor" class="hidden mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
				<% 
				  const invoicesByVendor = {};
				  invoices.forEach(inv => {
					const vendorName = inv.vendor || 'Unknown Vendor';
					if (!invoicesByVendor[vendorName]) {
					  invoicesByVendor[vendorName] = [];
					}
					invoicesByVendor[vendorName].push(inv);
				  });
				  Object.entries(invoicesByVendor).forEach(([vendor, vendorInvoices]) => {
					const totalQtyVendor = vendorInvoices.reduce((acc, cur) => acc + cur.totalQty, 0);
					const totalPriceVendor = vendorInvoices.reduce((acc, cur) => acc + cur.totalPrice, 0);
				%>
				  <div class="w-full overflow-x-auto">
					<h3 class="font-semibold text-lg mb-2"><%= vendor %></h3>
					<table class="w-full text-sm bg-white dark:bg-neutral-900">
					  <thead class="bg-green-500 dark:bg-green-700 text-white">
						<tr>
						  <th class="p-2 text-left">Invoice</th>
						  <th class="p-2 text-left">Date</th>
						  <th class="p-2 text-right">Qty</th>
						  <th class="p-2 text-right">Total</th>
						</tr>
					  </thead>
					  <tbody>
						<% vendorInvoices.forEach(inv => { %>
						  <tr class="border-b border-gray-200 dark:border-neutral-700">
							<td class="p-2 text-left whitespace-nowrap"><%= inv.invoice %></td>
							<td class="p-2 text-left whitespace-nowrap"><%= inv.date %></td>
							<td class="p-2 text-center whitespace-nowrap"><%= inv.totalQty %></td>
							<td class="p-2 text-right whitespace-nowrap"><%= inv.totalPrice.toLocaleString() %></td>
						  </tr>
						<% }); %>
						<tr class="font-semibold bg-gray-50 dark:bg-neutral-800">
						  <td class="p-2 text-left whitespace-nowrap" colspan="2">Total</td>
						  <td class="p-2 text-center whitespace-nowrap"><%= totalQtyVendor %></td>
						  <td class="p-2 text-right whitespace-nowrap"><%= totalPriceVendor.toLocaleString() %></td>
						</tr>
					  </tbody>
					</table>
				  </div>
				<% }); %>
			<div>
			
		</div>
	</main>
	
	<div id="inv-invoiceModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
		<div class="relative bg-white dark:bg-neutral-800 rounded w-full max-w-md shadow-lg p-4">
			<button id="inv-closeModal" class="absolute top-0 right-2 text-rose-500 dark:text-rose-700 hover:text-rose-600 dark:hover:rose-600 text-2xl font-bold">&times;</button>
			<div id="inv-modalContent"></div>
			<div class="mt-4 flex w-full gap-2 justify-center items-center">
				<button id="inv-printBtn" class="flex items-center gap-2 px-4 py-2 rounded bg-green-500 hover:bg-green-600 dark:bg-green-700 dark:hover:bg-green-600 text-white hover:scale-105 hover:duration-300 transition-all">
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M16 6H8c-2.828 0-4.243 0-5.121.879C2 7.757 2 9.172 2 12s0 4.243.879 5.121c.494.495 1.158.711 2.149.806C5 17.204 5 16.352 5 15.5a.5.5 0 0 1 0-1h14a.5.5 0 0 1 0 1c0 .852 0 1.704-.028 2.427c.99-.095 1.655-.311 2.15-.806C22 16.243 22 14.828 22 12s0-4.243-.879-5.121C20.243 6 18.828 6 16 6m-7 4.75a.75.75 0 0 0 0-1.5H6a.75.75 0 0 0 0 1.5zm8 .25a1 1 0 1 0 0-2a1 1 0 0 0 0 2" clip-rule="evenodd"/><path fill="currentColor" d="M17.121 2.879C16.242 2 14.828 2 12 2s-4.243 0-5.122.879c-.492.492-.708 1.153-.804 2.136C6.634 5 7.252 5 7.93 5h8.142c.677 0 1.295 0 1.854.015c-.095-.983-.312-1.644-.804-2.136M18 15.5c0 2.828 0 4.743-.879 5.621C16.243 22 14.828 22 12 22s-4.243 0-5.121-.879C6 20.243 6 18.328 6 15.5z"/></svg>
					Print
				</button>
				<button id="inv-downloadBtn" class="flex items-center gap-2 px-4 py-2 rounded bg-blue-500 hover:bg-blue-600 dark:bg-blue-700 dark:hover:bg-blue-600 text-white hover:scale-105 hover:duration-300 transition-all">
				  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path fill="currentColor" d="M5 20h14v-2H5v2zm7-18l-5.5 5.5h4v6h3v-6h4L12 2z"/></svg>
				  PDF
				</button>
				<button id="inv-sendWaBtn" class="flex items-center gap-2 px-4 py-2 rounded bg-emerald-500 hover:bg-emerald-600 dark:bg-emerald-700 dark:hover:bg-emerald-600 text-white hover:scale-105 hover:duration-300 transition-all">
				  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path fill="currentColor" d="M12 0C5.375 0 0 5.375 0 12c0 2.11.547 4.164 1.582 5.969L0 24l6.285-1.617A11.917 11.917 0 0 0 12 24c6.625 0 12-5.375 12-12S18.625 0 12 0zm0 22c-1.73 0-3.41-.438-4.914-1.27l-.351-.191L2 22l1.451-4.648-.25-.398C2.547 15.867 2 13.977 2 12c0-5.516 4.484-10 10-10s10 4.484 10 10-4.484 10-10 10z"/><path fill="currentColor" d="M17.5 14.5c-.27-.135-1.594-.789-1.84-.879-.246-.09-.43-.135-.613.135s-.703.879-.863 1.059c-.16.18-.317.203-.586.068c-.27-.135-1.141-.42-2.176-1.34-.804-.715-1.344-1.598-1.5-1.867c-.16-.27-.017-.414.12-.549c.123-.123.27-.318.405-.48c.135-.163.18-.27.27-.45c.09-.18.045-.338-.023-.473c-.068-.135-.613-1.48-.84-2.035c-.222-.535-.45-.465-.613-.472l-.52-.01c-.18 0-.47.068-.717.34c-.246.27-.938.918-.938 2.237c0 1.32.96 2.594 1.093 2.773c.135.18 1.89 2.887 4.57 4.05c.639.276 1.137.441 1.525.565c.641.204 1.224.175 1.684.106c.514-.076 1.594-.652 1.82-1.281c.226-.629.226-1.168.158-1.282c-.068-.114-.247-.18-.516-.315z"/></svg>
				  WhatsApp
				</button>
			</div>
		</div>
	</div>
	
	<div id="sessionModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
		<div class="bg-white dark:bg-neutral-800 rounded w-full max-w-sm shadow-lg p-4">
			<h2 class="text-lg font-semibold mb-2">Select Bot</h2>
			<select id="sessionSelect" class="w-full px-4 py-2 rounded bg-white dark:bg-neutral-900 border border-gray-200 dark:border-neutral-700 focus:outline-none focus:border-green-400 dark:focus:border-green-800">
				<option value="">Loading...</option>
			</select>
			<div class="flex justify-end gap-2 mt-4">
				<button id="cancelSessionBtn" class="px-4 py-2 rounded bg-rose-500 hover:bg-rose-600 dark:bg-rose-700 dark:hover:bg-rose-600 text-white hover:scale-105 hover:duration-300 transition-all">Cancel</button>
				<button id="confirmSessionBtn" class="px-4 py-2 rounded bg-green-500 hover:bg-green-600 dark:bg-green-700 dark:hover:bg-green-600 text-white hover:scale-105 hover:duration-300 transition-all">Send</button>
			</div>
		</div>
	</div>

	<% if (success_msg && success_msg.length > 0) { %>
		<div id="flash-message" class="fixed bottom-2 right-2 text-xs px-2 py-1 rounded bg-green-500 dark:bg-green-700 text-white font-semibold shadow-lg z-50">
			<%= success_msg[0] %>
		</div>
	<% } %>

	<% if (error_msg && error_msg.length > 0) { %>
		<div id="flash-message" class="fixed bottom-2 right-2 text-xs px-2 py-1 rounded bg-rose-500 dark:bg-rose-700 text-white font-semibold shadow-lg z-50">
			<%= error_msg[0] %>
		</div>
	<% } %>
	
	<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
	<script src="/assets/js/electronAPIPos.js"></script>
	<script>
		function showTab(tab) {
			const invoiceBtn = document.getElementById('tab-invoice');
			const stockBtn = document.getElementById('tab-stock');
			const vendorBtn = document.getElementById('tab-vendor');

			const invoiceContent = document.getElementById('content-invoice');
			const stockContent = document.getElementById('content-stock');
			const vendorContent = document.getElementById('content-vendor');

			invoiceBtn.classList.remove('border-green-500', 'dark:border-green-700', 'text-green-600', 'dark:text-green-600');
			invoiceBtn.classList.add('border-transparent');

			stockBtn.classList.remove('border-green-500', 'dark:border-green-700', 'text-green-700', 'dark:text-green-400');
			stockBtn.classList.add('border-transparent');

			vendorBtn.classList.remove('border-green-500', 'dark:border-green-700', 'text-green-700', 'dark:text-green-400');
			vendorBtn.classList.add('border-transparent');

			invoiceContent.classList.add('hidden');
			stockContent.classList.add('hidden');
			vendorContent.classList.add('hidden');

			if (tab === 'invoice') {
				invoiceBtn.classList.add('border-green-500', 'dark:border-green-700', 'text-green-600', 'dark:text-green-600');
				invoiceBtn.classList.remove('border-transparent');
				invoiceContent.classList.remove('hidden');
			} else if (tab === 'stock') {
				stockBtn.classList.add('border-green-500', 'dark:border-green-700', 'text-green-700', 'dark:text-green-400');
				stockBtn.classList.remove('border-transparent');
				stockContent.classList.remove('hidden');
			} else if (tab === 'vendor') {
				vendorBtn.classList.add('border-green-500', 'dark:border-green-700', 'text-green-700', 'dark:text-green-400');
				vendorBtn.classList.remove('border-transparent');
				vendorContent.classList.remove('hidden');
			}
		}

		function toggleRow(id) {
			const row = document.getElementById(`desc-${id}`);
			if (row) row.classList.toggle('hidden');
		}
	</script>
	<script>
	  (function () {
		const invoices = <%- JSON.stringify(invoices) %>;
		const customers = <%- JSON.stringify(customers) %>;
		const inventory = <%- JSON.stringify(inventory) %>;

		const customSelect = document.getElementById('custom-select');
		const selectedValue = document.getElementById('selected-value');
		const dropdown = document.getElementById('dropdown');
		const searchInput = document.getElementById('dropdown-search');
		const optionsList = document.getElementById('options-list');

		const modal = document.getElementById('inv-invoiceModal');
		const modalContent = document.getElementById('inv-modalContent');
		const closeModal = document.getElementById('inv-closeModal');
		const printBtn = document.getElementById('inv-printBtn');
		const downloadBtn = document.getElementById('inv-downloadBtn');

		function renderOptions(filter = '') {
		  const filtered = invoices.filter((inv) => {
			const cust = customers.find(c => String(c.id) === String(inv.id_customer));
			const text = `${cust ? cust.name : 'Unknown'} (${inv.invoice})`.toLowerCase();
			return text.includes(filter.toLowerCase());
		  });

		  if (filtered.length === 0) {
			optionsList.innerHTML = '<li class="p-2 text-gray-500 cursor-default select-none">No invoices found</li>';
			return;
		  }

		  optionsList.innerHTML = filtered
			.map(inv => {
			  const cust = customers.find(c => String(c.id) === String(inv.id_customer));
			  return `<li tabindex="0" class="px-4 py-2 hover:bg-green-100 dark:hover:bg-green-800 cursor-pointer" data-invoice="${inv.invoice}">
				${cust ? cust.name : 'Unknown'} (${inv.invoice})
			  </li>`;
			})
			.join('');
		}

		function toggleDropdown() {
		  if (dropdown.classList.contains('hidden')) {
			dropdown.classList.remove('hidden');
			searchInput.focus();
			renderOptions('');
			searchInput.value = '';
		  } else {
			dropdown.classList.add('hidden');
		  }
		}

		function showInvoiceModal(invoiceNumber) {
		  const inv = invoices.find(i => i.invoice === invoiceNumber);
		  if (!inv) return;

		  const cust = customers.find(c => String(c.id) === String(inv.id_customer));

		  let html = `
		  <div class="flex flex-col gap-2 w-full justify-center items-center mb-4 border-b border-gray-200 dark:border-neutral-700">
			<img class="h-20 w-20 object-cover mx-auto" src="/assets/images/logo.png" alt="logo" />
			<div class="w-full text-center">
			  <h2 class="text-3xl font-bold">M-WA</h2>
			  <div class="font-semibold w-full flex justify-between gap-4 items-center mt-4">
				<p>${inv.invoice}</p>
				<p>${inv.date}</p>
			  </div>
			</div>
		  </div>
		  <div class="grid grid-cols-1 gap-4">
			<div>
			  <p class="font-semibold">Customer:</p>
			  <p class="text-xs">${cust ? cust.name : '<span class="text-red-600">Data customer tidak ditemukan</span>'}</p>
			  <p class="text-xs">${cust ? cust.phone : '-'}</p>
			  <p class="text-xs">${cust && cust.address ? cust.address : '-'}</p>
			  <p class="text-xs">${cust ? cust.city : '-'}</p>
			  <p class="text-xs">${cust ? cust.state : '-'}, ${cust ? cust.code_pos : '-'}</p>
			</div>
		  </div>
		  <div class="font-semibold mt-4 flex justify-between gap-4 items-center p-2 bg-gray-100 dark:bg-neutral-900">
			<p class="w-full">Items</p>
			<p class="w-[80px] flex-none">Price</p>
			<p class="w-[80px] flex-none text-center">QTY</p>
		  </div>
		  <ul class="text-xs flex flex-col border-b border-gray-200 dark:border-neutral-700">
		  `;

		  inv.inventory.forEach(item => {
			const invItem = inventory.find(i => i.id === item.id_item);
			html += `<li class="flex justify-between gap-4 items-center px-2 py-1">
					  <p class="w-full">${invItem ? invItem.item : 'Unknown'}</p>
					  <p class="w-[80px] flex-none">${Number(item.price).toLocaleString()}</p>
					  <p class="w-[80px] flex-none text-center">${item.qty}</p>
					</li>`;
		  });

		  html += `
			</ul>
			<div class="font-semibold flex justify-between gap-4 items-center px-2 py-1 border-b border-gray-200 dark:border-neutral-700">
			  <p class="w-full">Total</p>
			  <p class="w-[80px] flex-none text-right">${Number(inv.total).toLocaleString()}</p>
			</div>
		  `;

		  modalContent.innerHTML = html;
		  modal.classList.remove('hidden');
		}

		selectedValue.addEventListener('click', () => {
		  toggleDropdown();
		});

		searchInput.addEventListener('input', (e) => {
		  renderOptions(e.target.value);
		});

		optionsList.addEventListener('click', (e) => {
		  if (e.target.tagName.toLowerCase() === 'li' && e.target.dataset.invoice) {
			selectedValue.textContent = e.target.textContent;
			dropdown.classList.add('hidden');
			showInvoiceModal(e.target.dataset.invoice);
		  }
		});

		optionsList.addEventListener('keydown', (e) => {
		  if (e.key === 'Enter' && e.target.dataset.invoice) {
			selectedValue.textContent = e.target.textContent;
			dropdown.classList.add('hidden');
			showInvoiceModal(e.target.dataset.invoice);
		  }
		});

		document.addEventListener('click', (e) => {
		  if (!customSelect.contains(e.target)) {
			dropdown.classList.add('hidden');
		  }
		});

		closeModal.addEventListener('click', () => {
		  modal.classList.add('hidden');
		});

		printBtn.addEventListener('click', () => {
		  const content = modalContent.innerHTML;

		  const styles = Array.from(document.querySelectorAll('link[rel="stylesheet"], style'))
			.map(node => node.outerHTML)
			.join('\n');

		  const printWindow = window.open('', '', 'width=800,height=600');
		  printWindow.document.write(`
			<html>
			  <head>
				<title>Print Invoice</title>
				${styles}
				<style>
				  body {
					background: white;
					color: black;
					font-family: Arial, sans-serif;
				  }
				</style>
			  </head>
			  <body>
				<div id="printable-invoice" class="p-4 bg-white text-black">
				  ${content}
				</div>
			  </body>
			</html>
		  `);
		  printWindow.document.close();

		  printWindow.focus();

		  printWindow.onload = function () {
			printWindow.print();
			printWindow.close();
		  };
		});
		
		downloadBtn.addEventListener('click', () => {
		  const element = document.createElement('div');
		  element.innerHTML = modalContent.innerHTML;
		  element.style.padding = '1rem';
		  element.style.backgroundColor = 'white';
		  element.style.color = 'black';

		  html2pdf()
			.set({
			  margin: 10,
			  filename: 'invoice.pdf',
			  image: { type: 'jpeg', quality: 0.98 },
			  html2canvas: { scale: 2 },
			  jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
			})
			.from(element)
			.save();
		});
				
		const sendWaBtn = document.getElementById('inv-sendWaBtn');
		const sessionModal = document.getElementById('sessionModal');
		const sessionSelect = document.getElementById('sessionSelect');
		const cancelSessionBtn = document.getElementById('cancelSessionBtn');
		const confirmSessionBtn = document.getElementById('confirmSessionBtn');

		let selectedInvoice = null;
		
		sendWaBtn.addEventListener('click', async () => {
		  const match = selectedValue.textContent.match(/\((.*?)\)/);
		  selectedInvoice = invoices.find(i => i.invoice === (match ? match[1] : null));
		  if (!selectedInvoice) return alert('Invoice data not found');

		  try {
			const res = await fetch('/webhook/sessions');
			const data = await res.json();

			if (!data.success || !Array.isArray(data.sessions) || data.sessions.length === 0) {
			  alert('No active bot sessions.');
			  return;
			}

			sessionSelect.innerHTML = data.sessions
			  .map(sess => {
				const disabled = sess.status === 'not_connected' ? 'disabled' : '';
				return `
				<option value="" disabled selected>-- Select Bot --</option>
				<option value="${sess.sessionId}" ${disabled}>${sess.sessionId} (${sess.status})</option>
				`;
			  })
			  .join('');

			sessionModal.classList.remove('hidden');
		  } catch (err) {
			console.error(err);
			alert('Failed to retrieve bot session.');
		  }
		});

		cancelSessionBtn.addEventListener('click', () => {
		  sessionModal.classList.add('hidden');
		});

		confirmSessionBtn.addEventListener('click', async () => {
		  const sessionId = sessionSelect.value;
		  const cust = customers.find(c => String(c.id) === String(selectedInvoice.id_customer));
		  if (!sessionId || !cust || !cust.phone) return alert('Incomplete data');

		  const message = `*Invoice:* ${selectedInvoice.invoice}
*Date:* ${selectedInvoice.date}

*Customer:*
${cust.name}
${cust.phone}
${cust.address || '-'}
${cust.city || '-'}, ${cust.state || '-'} ${cust.code_pos || ''}

*Items:*
${selectedInvoice.inventory.map(item => {
const invItem = inventory.find(i => i.id === item.id_item);
const itemName = invItem ? invItem.item : 'Unknown';
const price = Number(item.price).toLocaleString();
	return `- ${itemName} | Price: ${item.qty} x ${price}`;
}).join('\n')}

*Total:* ${Number(selectedInvoice.total).toLocaleString()}`;

		  try {
			const res = await fetch('/webhook/send-message', {
			  method: 'POST',
			  headers: { 'Content-Type': 'application/json' },
			  body: JSON.stringify({
				sessionId,
				number: cust.phone,
				message
			  })
			});

			const text = await res.text();

			if (!res.ok) {
			  throw new Error(`HTTP error! status: ${res.status}, message: ${text}`);
			}

			const result = JSON.parse(text);

			if (result.success) {
			  alert('Message sent successfully!');
			} else {
			  alert('Failed to send message');
			}
		  } catch (err) {
			console.error('Error while sending message:', err);
			alert('An error occurred while sending the message: ' + err.message);
		  }

		  sessionModal.classList.add('hidden');
		});


	  })();
	</script>
</body>
</html>
